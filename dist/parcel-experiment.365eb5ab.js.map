{"version":3,"sources":["index.js"],"names":["canvas","document","getElementById","ctx","getContext","width","height","ballRadius","x","y","dx","dy","paddleHeight","paddleWidth","paddleX","brickRowCount","brickColumnCount","brickWidth","brickHeight","brickPadding","brickOffsetTop","brickOffsetLeft","bricks","brickColors","c","r","status","color","length","score","isRightPressed","isLeftPressed","keyDownHandler","e","key","keyUpHandler","collisionDetection","b","alert","location","reload","drawBall","beginPath","arc","Math","PI","fillStyle","fill","closePath","drawPaddle","rect","drawBricks","brickX","brickY","drawScore","font","fillText","draw","clearRect","requestAnimationFrame","addEventListener"],"mappings":"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","file":"parcel-experiment.365eb5ab.js","sourceRoot":"..","sourcesContent":["// 获取画布和上下文  \r\nconst canvas = document.getElementById(\"gameCanvas\");  \r\nconst ctx = canvas.getContext(\"2d\");  \r\n\r\n// 设置画布大小  \r\ncanvas.width = 640;  \r\ncanvas.height = 480;  \r\n\r\n// 定义球和砖块的属性  \r\nconst ballRadius = 10;  \r\nlet x = canvas.width / 2;  \r\nlet y = canvas.height - 30;  \r\nlet dx = 2;  \r\nlet dy = -2;  \r\n\r\nconst paddleHeight = 10;  \r\nconst paddleWidth = 75;  \r\nlet paddleX = (canvas.width - paddleWidth) / 2;  \r\n\r\n// 砖块设置  \r\nconst brickRowCount = 5;  \r\nconst brickColumnCount = 3;  \r\nconst brickWidth = 75;  \r\nconst brickHeight = 20;  \r\nconst brickPadding = 10;  \r\nconst brickOffsetTop = 30;  \r\nconst brickOffsetLeft = 30;  \r\n\r\nlet bricks = [];  \r\nconst brickColors = [\"#FF5733\", \"#33FF57\", \"#3357FF\", \"#F0E68C\", \"#FF33A6\"]; // 定义不同颜色的砖块  \r\nfor (let c = 0; c < brickColumnCount; c++) {  \r\n    bricks[c] = [];  \r\n    for (let r = 0; r < brickRowCount; r++) {  \r\n        bricks[c][r] = { x: 0, y: 0, status: 1, color: brickColors[r % brickColors.length] }; // 根据行选择颜色  \r\n    }  \r\n}  \r\n\r\nlet score = 0;  \r\nlet isRightPressed = false;  \r\nlet isLeftPressed = false;  \r\n\r\n// 处理键盘事件  \r\ndocument.addEventListener(\"keydown\", keyDownHandler);  \r\ndocument.addEventListener(\"keyup\", keyUpHandler);  \r\n\r\nfunction keyDownHandler(e) {  \r\n    if (e.key === \"Right\" || e.key === \"ArrowRight\") {  \r\n        isRightPressed = true;  \r\n    } else if (e.key === \"Left\" || e.key === \"ArrowLeft\") {  \r\n        isLeftPressed = true;  \r\n    }  \r\n}  \r\n\r\nfunction keyUpHandler(e) {  \r\n    if (e.key === \"Right\" || e.key === \"ArrowRight\") {  \r\n        isRightPressed = false;  \r\n    } else if (e.key === \"Left\" || e.key === \"ArrowLeft\") {  \r\n        isLeftPressed = false;  \r\n    }  \r\n}  \r\n\r\n// 碰撞检测  \r\nfunction collisionDetection() {  \r\n    for (let c = 0; c < brickColumnCount; c++) {  \r\n        for (let r = 0; r < brickRowCount; r++) {  \r\n            const b = bricks[c][r];  \r\n            if (b.status === 1) {  \r\n                if (x > b.x && x < b.x + brickWidth && y > b.y && y < b.y + brickHeight) {  \r\n                    dy = -dy;  \r\n                    b.status = 0;  \r\n                    score++;  \r\n                    if (score === brickRowCount * brickColumnCount) {  \r\n                        alert(\"恭喜你，获胜了！\");  \r\n                        document.location.reload();  \r\n                    }  \r\n                }  \r\n            }  \r\n        }  \r\n    }  \r\n}  \r\n\r\n// 绘制球、挡板和砖块  \r\nfunction drawBall() {  \r\n    ctx.beginPath();  \r\n    ctx.arc(x, y, ballRadius, 0, Math.PI * 2);  \r\n    ctx.fillStyle = \"#0095DD\";  \r\n    ctx.fill();  \r\n    ctx.closePath();  \r\n}  \r\n\r\nfunction drawPaddle() {  \r\n    ctx.beginPath();  \r\n    ctx.rect(paddleX, canvas.height - paddleHeight, paddleWidth, paddleHeight);  \r\n    ctx.fillStyle = \"#0095DD\";  \r\n    ctx.fill();  \r\n    ctx.closePath();  \r\n}  \r\n\r\nfunction drawBricks() {  \r\n    for (let c = 0; c < brickColumnCount; c++) {  \r\n        for (let r = 0; r < brickRowCount; r++) {  \r\n            const b = bricks[c][r];  \r\n            if (b.status === 1) {  \r\n                const brickX = c * (brickWidth + brickPadding) + brickOffsetLeft;  \r\n                const brickY = r * (brickHeight + brickPadding) + brickOffsetTop;  \r\n                b.x = brickX;  \r\n                b.y = brickY;  \r\n                ctx.beginPath();  \r\n                ctx.rect(brickX, brickY, brickWidth, brickHeight);  \r\n                ctx.fillStyle = b.color; // 使用砖块的颜色  \r\n                ctx.fill();  \r\n                ctx.closePath();  \r\n            }  \r\n        }  \r\n    }  \r\n}  \r\n\r\nfunction drawScore() {  \r\n    ctx.font = \"16px Arial\";  \r\n    ctx.fillStyle = \"#0095DD\";  \r\n    ctx.fillText(\"分数: \" + score, 8, 20);  \r\n}  \r\n\r\n// 主要绘制函数  \r\nfunction draw() {  \r\n    ctx.clearRect(0, 0, canvas.width, canvas.height);  \r\n    drawBricks();  \r\n    drawBall();  \r\n    drawPaddle();  \r\n    drawScore();  \r\n    collisionDetection();  \r\n\r\n    // 小球移动  \r\n    x += dx;  \r\n    y += dy;  \r\n\r\n    // 碰撞检测边界  \r\n    if (x + dx > canvas.width - ballRadius || x + dx < ballRadius) {  \r\n        dx = -dx;  \r\n    }  \r\n    if (y + dy < ballRadius) {  \r\n        dy = -dy;  \r\n    } else if (y + dy > canvas.height - ballRadius) {  \r\n        if (x > paddleX && x < paddleX + paddleWidth) {  \r\n            dy = -dy;  \r\n        } else {  \r\n            alert(\"游戏结束！\");  \r\n            document.location.reload();  \r\n        }  \r\n    }  \r\n\r\n    // 控制挡板移动  \r\n    if (isRightPressed && paddleX < canvas.width - paddleWidth) {  \r\n        paddleX += 7;  \r\n    } else if (isLeftPressed && paddleX > 0) {  \r\n        paddleX -= 7;  \r\n    }  \r\n\r\n    requestAnimationFrame(draw);  \r\n}  \r\n\r\n// 启动游戏  \r\ndraw();"]}